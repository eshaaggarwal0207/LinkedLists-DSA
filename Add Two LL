#include<iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    Node(int data){
        this-> data= data;
        this-> next= NULL;
    }
};

int length(Node* &head){
    int lngth=0;
    Node* temp= head;
    while (temp != NULL)
    {
        lngth++;
        temp=temp->next;
    }
    return lngth;
}

void Insert_at_beg(Node* &head,int data){
    Node* temp= new Node(data); //new node
    if (head == NULL)
    {
        head = temp;
        return;
    }
    
    temp->next= head;  //inserting at beg
    head= temp; //updating head
}

int AddLLHelper(Node* head1,int s1,Node* head2,int s2,Node* &res){
    if (head1 == NULL && head2== NULL)
    {
        return 0;
    }

    int data = 0;

    if (s1 > s2)
    {
        int oc = AddLLHelper(head1->next,s1-1,head2,s2,res);
        data = head1->data + oc;
    }
    else if(s1 < s2){
        int oc = AddLLHelper(head1,s1,head2->next,s2-1,res);
        data = head2->data + oc;

    }
    else{
        int oc = AddLLHelper(head1->next,s1-1,head2->next,s2-1,res);
        data = head1->data + head2->data + oc;
    }

    int nd = data%10;
    int nc = data/10;

    Insert_at_beg(res,nd);
    return nc;
}



Node* AddTwoLL(Node* head1,Node* head2){
    Node* result = NULL;
    

    int size1 = length(head1);
    int size2 = length(head2);
    int oc = AddLLHelper(head1,size1,head2,size2,result);
    if (oc > 0)
    {
       Insert_at_beg(result,oc); 
    }
    
    return result;
}

void Print(Node* head){
    if (head== NULL)
    {
       cout<<"List is empty"<<endl;
       return; 
    }
    
    Node* temp= head;
    while (temp != NULL)
    {
        cout<<temp->data<<"->";
        temp= temp->next;
    }
    cout<<"NULL"<<endl;
}

int main(){
    Node* head1 = new Node(6);
    Insert_at_beg(head1,4);
    Insert_at_beg(head1,9);
    Insert_at_beg(head1,5);
    Insert_at_beg(head1,7);
    Node* head2 = new Node(4);
    Insert_at_beg(head2,8);
    Print(head1);
    Print(head2);
    cout<<"After adding these two LL's"<<endl;
    Print(AddTwoLL(head1,head2));
}
