#include<iostream>
#include<map>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    Node(int data){
        this-> data= data;
        this-> next= NULL;
    }

    ~Node(){
        int value= this->data;
        if(this->next != NULL){
            delete next;
            next = NULL;
        }
        cout<<"Memory is free for data value"<<value<<endl;
    }
};

int length(Node* head){
    Node* temp = head;
    int lngth = 0;
    while(temp != NULL){
        lngth++;
        temp = temp->next;
    }
    return lnght;
}

Node* ReversingLL(Node* &head){
    Node* prev= NULL;
    Node* curr= head;
    Node* next;
    while (curr != NULL)
    {
        next= curr->next;
        curr->next= prev;
        
        prev= curr;
        curr= next;
    }
    head= prev;
    return head;
}

int KthElementFromLast(Node* head,int k){
     if(head == NULL){
         return NULL;
     }
     int size = length(head);
     if(k > size){
         return NULL;
     }
     Node* reversedhead = ReversingLL(head);
     Node* n = reversedhead;
     int i = 1;
     while( i < k){
           n = n->next;
           i++;
     }
     
     return n->data;
}
     
         
     
     
